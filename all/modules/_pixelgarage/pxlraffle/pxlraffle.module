<?php
/**
* @file
* A description of what your module does.
*/

/**
 * Defines the pxlraffle platform admin menu path.
 */
define('PXLRAFFLE_ADMIN_MENU_PATH', 'admin/pxlraffle');

/**
 * Dummy email recipient address.
 */
define('PXLRAFFLE_DUMMY_EMAIL_RECIPIENT', 'test@test.tld');



//
// Adapts user profile form to support raffles
require_once 'includes/user.profile.inc';

//
// Adds user public functions
require_once 'includes/user.public.inc';

//
// Adds raffle public functions
require_once 'includes/raffle.public.inc';



/* --------------------------------------------------
 * PxlRaffle session data
 * --------------------------------------------------*/
/**
 * Session wide data container.
 *
 * @return array Returns the session data array.
 */
function &pxlraffle_session_data() {
  if (!isset($_SESSION['pxlRaffle'])) {
    $_SESSION['pxlRaffle'] = array();
  }
  return $_SESSION['pxlRaffle'];
}


/* --------------------------------------------------
 * PxlRaffle hook implementations
 * --------------------------------------------------*/

/**
 * Implements hook_permission().
 */
function pxlraffle_permission() {
  return array(
    'administer pixel raffle' => array(
      'title' => t('Administer PxlRaffle'),
      'description' => t('Allows to administer the settings for the Pixel Raffle module.'),
    ),
  );
}

/**
 * Define the pxlRaffle menu as top node of the admin menu.
 * All administration of the PxlRaffle platform is added below this menu.
 * @return mixed
 */
function pxlraffle_menu() {
  $items[PXLRAFFLE_ADMIN_MENU_PATH] = array(
    'title' => 'Basic Income Raffle',
    'description' => 'PxlRaffle - a tool to collect and raffle money.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer pixel raffle'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  // callback: renew the current raffle for specified user
  $items['user/%/raffle/renew'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_pxlraffle_renew_raffle_callback',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );
  // callback: remove the specified user from a raffle
  $items['user/%/raffle/remove'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_pxlraffle_remove_raffle_callback',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );

  return $items;
}


/* --------------------------------------------------
 * PxlRaffle callbacks
 * --------------------------------------------------*/

function _pxlraffle_renew_raffle_callback ($uid) {
  $user = user_load($uid);

  // update user raffle, if possible
  pxlraffle_renew_user_raffle($user);

  // redirect to user edit form
  drupal_goto('user/' . $uid . '/edit', array(), 301);
}

function _pxlraffle_remove_raffle_callback ($uid) {
  $user = user_load($uid);

  // remove user from raffle, if any
  if (!empty($user->field_current_raffle)) {
    $user = user_save($user, array('field_current_raffle' => null));
    $msg = t('You (@user) have been successfully removed from any raffle.', array('@user' => $user->name));
    drupal_set_message($msg);
  }

  // redirect to user edit form
  drupal_goto('user/' . $uid . '/edit', array(), 301);
}



/* --------------------------------------------------
 * PxlRaffle themes
 * --------------------------------------------------*/

/**
 * Implements hook_theme().
 */
function pxlraffle_theme() {
  return array(
    'pxlraffle_current_info' => array(
      'variables' => array(
        'container_id' => 'pxlraffle-current-info',
      ),
      'file' => 'templates/pxlraffle_current_info.vars.php',
      'template' => 'templates/pxlraffle_current_info',
    ),
    'pxlraffle_next_raffle' => array(
      'variables' => array(
        'container_id' => 'pxlraffle-next-raffle',
      ),
      'file' => 'templates/pxlraffle_next_raffle.vars.php',
      'template' => 'templates/pxlraffle_next_raffle',
    ),
    'pxlraffle_subscriptions' => array(
      'variables' => array(
        'container_id' => 'pxlraffle-subscriptions',
      ),
      'file' => 'templates/pxlraffle_subscriptions.vars.php',
      'template' => 'templates/pxlraffle_subscriptions',
    ),
  );
}


/* --------------------------------------------------
 * PxlRaffle info block
 * --------------------------------------------------*/
/**
 * Implements hook_block_info().
 */
function pxlraffle_block_info() {
  $blocks['pxlraffle_current_info'] = array(
    'info' => t('Current raffle information'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['pxlraffle_next_raffle'] = array(
    'info' => t('Next raffle'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['pxlraffle_subscriptions'] = array(
    'info' => t('Raffle subscriptions'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function pxlraffle_block_configure($delta = '') {
  switch ($delta) {
    case 'pxlraffle_current_info':
    case 'pxlraffle_subscriptions':
      return _pxlraffle_block_form($delta);
  }
}


function _pxlraffle_block_form ($delta) {
  $form['pxlraffle_odometer'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Odometer specific configuration'),
    '#description'   => t('Configure the odometer specific values.'),
    '#collapsible'  => FALSE,
    '#collapsed'    => FALSE,
  );
  $form['pxlraffle_odometer']['pxlraffle_odometer_label'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Odometer label'),
    '#default_value' => variable_get($delta . '_odometer_label', ''),
    '#description'   => t('Sets the label for the odometer'),
  );
  $form['pxlraffle_odometer']['pxlraffle_odometer_label_position'] = array(
    '#type' => 'radios',
    '#title' => t('Position of label'),
    '#default_value' => variable_get($delta . '_odometer_label_position', 'top'),
    '#options' => array(
      'top' => t('Label above odometer'),
      'bottom' => t('Label below odometer'),
    ),
  );
  $form['pxlraffle_odometer']['pxlraffle_odometer_anim_number_range'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Animated number range'),
    '#default_value' => variable_get($delta . '_odometer_anim_number_range', 0),
    '#description'   => t('Define the range of numbers that are animated when the odometer is shown.'),
  );
  $form['pxlraffle_odometer']['pxlraffle_odometer_theme'] = array(
    '#type' => 'select',
    '#title' => t('Theme'),
    '#options' => array(
      'default' => t('Default'),
      'car' => t('Car'),
      'train_station' => t('Train station'),
      'digital' => t('Digital'),
      'minimal' => t('Minimal'),
      'plaza' => t('Plaza'),
      'slot_machine' => t('Slot machine'),
    ),
    '#description' => t('Select a predefined theme. All themes can be customized in CSS.'),
    '#default_value' => variable_get($delta . '_odometer_theme', 'default'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function pxlraffle_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'pxlraffle_current_info':
    case 'pxlraffle_subscriptions':
      variable_set($delta . '_odometer_label', $edit['pxlraffle_odometer_label']);
      variable_set($delta . '_odometer_label_position', $edit['pxlraffle_odometer_label_position']);
      variable_set($delta . '_odometer_anim_number_range', $edit['pxlraffle_odometer_anim_number_range']);
      variable_set($delta . '_odometer_theme', $edit['pxlraffle_odometer_theme']);
      break;
  }
}


/**
 * Implements hook_block_view().
 *
 * Displays the current raffle information.
 */
function pxlraffle_block_view($delta = 0) {
  $block = array();

  switch ($delta) {
    case 'pxlraffle_current_info':
      $block['subject'] = null;
      $block['content'] = theme('pxlraffle_current_info');
      break;
    case 'pxlraffle_next_raffle':
      $block['subject'] = null;
      $block['content'] = theme('pxlraffle_next_raffle');
      break;
    case 'pxlraffle_subscriptions':
      $block['subject'] = null;
      $block['content'] = theme('pxlraffle_subscriptions');
      break;
  }
  return $block;
}

function pxlraffle_odometer_theme_attachments (&$vars, $delta) {
  // set variables
  $vars['odometer_label_on_top'] = variable_get($delta . '_odometer_label_position') == 'top';
  $vars['odometer_label'] = t(variable_get($delta . '_odometer_label'));

  // add js and css files
  $path = drupal_get_path('module', 'pxlraffle');
  $animated_range = variable_get($delta . '_odometer_anim_number_range');
  $theme = variable_get($delta . '_odometer_theme');
  $css_file = $path;

  switch ($theme) {
    case 'car':
      $css_file .= '/css/odometer-theme-car.css';
      break;
    case 'train_station':
      $css_file .= '/css/odometer-theme-train-station.css';
      break;
    case 'digital':
      $css_file .= '/css/odometer-theme-digital.css';
      break;
    case 'minimal':
      $css_file .= '/css/odometer-theme-minimal.css';
      break;
    case 'plaza':
      $css_file .= '/css/odometer-theme-plaza.css';
      break;
    case 'slot_machine':
      $css_file .= '/css/odometer-theme-slot_machine.css';
      break;
    case 'default':
    default:
      $css_file .= '/css/odometer-theme-default.css';
      break;
  }

  // set js settings
  $js_settings = array(
    'pxlraffle_odometer' => array(
      'animated_range' => $animated_range
    ),
  );

  // add files
  drupal_add_css($css_file);
  drupal_add_js($path . '/js/odometer.min.js');
  drupal_add_js($path . '/js/odometer_anim.js');
  drupal_add_js($js_settings, 'setting');

}
